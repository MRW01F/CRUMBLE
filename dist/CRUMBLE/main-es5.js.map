{"version":3,"sources":["webpack:///src/app/subreddit/subreddit.service.ts","webpack:///src/app/auth/user-profile/user-profile.component.css","webpack:///src/app/subreddit/list-subreddits/list-subreddits.component.css","webpack:///src/app/auth/signup/signup.component.html","webpack:///src/app/post/view-post/view-post.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/app.component.css","webpack:///src/environments/environment.ts","webpack:///src/app/shared/vote-button/vote-button.component.html","webpack:///src/app/shared/subreddit-side-bar/subreddit-side-bar.component.ts","webpack:///src/app/header/header.component.css","webpack:///src/app/shared/post.service.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/post/view-post/view-post.component.ts","webpack:///src/app/shared/vote.service.ts","webpack:///src/app/subreddit/list-subreddits/list-subreddits.component.html","webpack:///src/app/shared/vote-button/vote-button.component.css","webpack:///src/app/subreddit/list-subreddits/list-subreddits.component.ts","webpack:///src/app/auth/signup/signup.component.css","webpack:///src/app/token-interceptor.ts","webpack:///src/app/subreddit/create-subreddit/create-subreddit.component.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/post/create-post/create-post.component.html","webpack:///src/app/shared/vote-button/vote-type.ts","webpack:///src/app/auth/user-profile/user-profile.component.html","webpack:///src/app/post/view-post/view-post.component.css","webpack:///src/app/home/home.component.css","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/post/create-post/create-post.component.css","webpack:///src/app/app.component.html","webpack:///src/app/auth/shared/auth.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/shared/vote-button/vote-button.component.ts","webpack:///src/app/subreddit/create-subreddit/create-subreddit.component.css","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/shared/post-tile/post-tile.component.ts","webpack:///src/app/shared/post-tile/post-tile.component.css","webpack:///src/app/shared/side-bar/side-bar.component.css","webpack:///src/app/header/header.component.ts","webpack:///src/app/shared/side-bar/side-bar.component.html","webpack:///src/app/shared/subreddit-side-bar/subreddit-side-bar.component.css","webpack:///src/app/header/header.component.html","webpack:///src/app/comment/comment.service.ts","webpack:///src/app/subreddit/create-subreddit/create-subreddit.component.html","webpack:///src/app/shared/subreddit-side-bar/subreddit-side-bar.component.html","webpack:///src/app/auth/user-profile/user-profile.component.ts","webpack:///src/app/shared/post-tile/post-tile.component.html","webpack:///src/app/post/create-post/create-post.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/auth/login/login.component.css","webpack:///src/app/shared/side-bar/side-bar.component.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/auth/login/login.component.html"],"names":["SubredditService","http","get","subredditModel","post","providedIn","HomeComponent","postService","posts","getAllPosts","subscribe","selector","template","environment","production","SubredditSideBarComponent","subredditService","subreddits","getAllSubreddits","data","length","splice","displayViewAll","PostService","postPayload","id","name","ViewPostComponent","activateRoute","commentService","router","postId","snapshot","params","commentForm","text","required","commentPayload","getPostById","getCommentsForPost","value","postComment","setValue","error","getPost","getAllCommentsForPost","comments","VoteService","votePayload","ListSubredditsComponent","TokenInterceptor","authService","isTokenRefreshing","refreshTokenSubject","req","next","url","indexOf","handle","jwtToken","getJwtToken","addToken","pipe","status","handleAuthErrors","refreshToken","refreshTokenResponse","authenticationToken","result","res","clone","headers","set","CreateSubredditComponent","title","description","createSubredditForm","navigateByUrl","createSubreddit","AuthGuard","state","isAuthenticated","isLoggedIn","VoteType","SignupComponent","toastr","signupRequestPayload","username","email","password","signupForm","signup","navigate","queryParams","registered","console","log","AppComponent","AuthService","httpClient","localStorage","loggedIn","refreshTokenPayload","getRefreshToken","getUserName","responseType","loginRequestPayload","store","expiresAt","emit","retrieve","response","clear","AppModule","declarations","imports","forRoot","providers","provide","useClass","multi","bootstrap","VoteButtonComponent","voteService","faArrowUp","faArrowDown","voteType","undefined","updateVoteDetails","UPVOTE","vote","downvoteColor","DOWNVOTE","upvoteColor","message","LoginComponent","activatedRoute","loginForm","success","registerSuccessMessage","login","isError","PostTileComponent","faComments","encapsulation","None","HeaderComponent","faUser","logout","CommentService","UserProfileComponent","getAllPostsByUser","postLength","getAllCommentsByUser","commentLength","CreatePostComponent","postName","subredditName","createPostForm","createPost","routes","path","component","canActivate","AppRoutingModule","exports","SideBarComponent","bootstrapModule","err","webpackEmptyAsyncContext","Promise","resolve","then","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SubredditModel } from './subreddit-response';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubredditService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllSubreddits(): Observable<Array<SubredditModel>> {\r\n    return this.http.get<Array<SubredditModel>>('http://localhost:8080/api/subreddit');\r\n  }\r\n\r\n  createSubreddit(subredditModel: SubredditModel): Observable<SubredditModel> {\r\n    return this.http.post<SubredditModel>('http://localhost:8080/api/subreddit',\r\n      subredditModel);\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsaXN0LXN1YnJlZGRpdHMuY29tcG9uZW50LmNzcyJ9 */\";","export default \"<div class=\\\"register-section\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-3\\\"></div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n                <div class=\\\"card-header\\\" style=\\\"text-align: center\\\">\\r\\n                    <h4>Register</h4>\\r\\n                </div>\\r\\n                <div class=\\\"card-body\\\">\\r\\n                    <form [formGroup]=\\\"signupForm\\\" (ngSubmit)=\\\"signup()\\\">\\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <label for=\\\"email_address\\\" class=\\\"col-md-4 col-form-label text-md-right\\\">E-Mail\\r\\n                                Address</label>\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <input type=\\\"text\\\" [formControlName]=\\\"'email'\\\" id=\\\"email_address\\\" class=\\\"form-control\\\" name=\\\"email-address\\\" required\\r\\n                                    autofocus>\\r\\n                                <span *ngIf=\\\"!signupForm.get('email').valid && signupForm.get('email').touched\\\">\\r\\n                                    Please provide a valid email\\r\\n                                </span>                                    \\r\\n                            </div>\\r\\n                        </div>\\r\\n \\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <label class=\\\"col-md-4 col-form-label text-md-right\\\">User Name</label>\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <input type=\\\"text\\\" [formControlName]=\\\"'username'\\\"class=\\\"form-control\\\" required autofocus>\\r\\n                                <span *ngIf=\\\"!signupForm.get('username').valid && signupForm.get('username').touched\\\">\\r\\n                                    Please provide a valid username\\r\\n                                </span>                                 \\r\\n                            </div>\\r\\n                        </div>\\r\\n \\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <label for=\\\"password\\\" class=\\\"col-md-4 col-form-label text-md-right\\\">Password</label>\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <input type=\\\"password\\\" [formControlName]=\\\"'password'\\\" id=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" required>\\r\\n                                <span *ngIf=\\\"!signupForm.get('password').valid && signupForm.get('password').touched\\\">\\r\\n                                    Please provide a valid Password\\r\\n                                </span>  \\r\\n                            </div>\\r\\n                        </div>\\r\\n \\r\\n                        <span class=\\\"col-md-6 offset-md-4\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"sign-up\\\">\\r\\n                                Sign Up\\r\\n                            </button>\\r\\n                            <span style=\\\"padding-left: 15px\\\">Existing user? <a routerLink=\\\"/login\\\">Log In</a></span>\\r\\n                        </span>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-3\\\"></div>\\r\\n    </div>\\r\\n</div>\";","export default \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <hr />\\r\\n    <div class=\\\"col-md-9\\\">\\r\\n      <div class=\\\"row post\\\">\\r\\n        <div class=\\\"col-md-1\\\">\\r\\n          <app-vote-button [post]=\\\"post\\\"></app-vote-button>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-11\\\">\\r\\n          <span>\\r\\n            <span class=\\\"subreddit-text\\\"><a class=\\\"post-url\\\" href=\\\"\\\">{{post.subredditName}}</a></span>\\r\\n            <span> . Posted\\r\\n              <span> {{post.duration}} </span>\\r\\n              by              \\r\\n              <a class=\\\"username\\\" href=\\\"\\\">{{post.userName}}</a>\\r\\n            </span>\\r\\n          </span>\\r\\n          <hr />\\r\\n          <a routerLink=\\\"post.url\\\" class=\\\"post-title\\\">{{post.postName}}</a>\\r\\n          <div>\\r\\n            <p class=\\\"post-text\\\" [innerHtml]=\\\"post.description\\\"></p>\\r\\n          </div>\\r\\n          <div class=\\\"post-comment\\\">\\r\\n            <form [formGroup]=\\\"commentForm\\\" (ngSubmit)=\\\"postComment()\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <textarea class=\\\"form-control\\\" [formControlName]=\\\"'text'\\\" placeholder=\\\"Your Thoughts?\\\"></textarea>\\r\\n              </div>\\r\\n              <button type=\\\"submit\\\" class=\\\"login float-right\\\">Comment</button>\\r\\n            </form>\\r\\n          </div>\\r\\n          <div style=\\\"margin-top: 60px;\\\" *ngFor=\\\"let comment of comments\\\">\\r\\n            <div class=\\\"comment\\\">\\r\\n              <div class=\\\"username\\\">\\r\\n                <a routerLink=\\\"/user/comment.username\\\">{{comment.userName}}</a>\\r\\n              </div>\\r\\n              <div>\\r\\n                <p>{{comment.duration}}</p>\\r\\n              </div>\\r\\n              <b>{{comment.text}}</b>\\r\\n            </div>\\r\\n            <hr />\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n      <app-side-bar></app-side-bar>\\r\\n      <app-subreddit-side-bar></app-subreddit-side-bar>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { PostModel } from '../shared/post-model';\r\nimport { PostService } from '../shared/post.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  posts: Array<PostModel> = [];\r\n\r\n  constructor(private postService: PostService) {\r\n    this.postService.getAllPosts().subscribe(post => {\r\n      this.posts = post;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LmNzcyJ9 */\";","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","export default \"<!-- Section to Display Votes-->\\r\\n<div class=\\\"col-md-1\\\">\\r\\n    <div class=\\\"d-flex flex-column votebox\\\">\\r\\n    <div class=\\\"p-2\\\">\\r\\n        <fa-icon (click)=\\\"upvotePost()\\\" class=\\\"upvote\\\" [icon]=\\\"faArrowUp\\\" [style.color]=\\\"post.upVote ? 'green':''\\\">\\r\\n        </fa-icon>\\r\\n    </div>\\r\\n    <div class=\\\"p-2 votecount\\\">{{post.voteCount}}</div>\\r\\n    <div class=\\\"p-2\\\">\\r\\n        <fa-icon (click)=\\\"downvotePost()\\\" class=\\\"downvote\\\" [icon]=\\\"faArrowDown\\\" [style.color]=\\\"post.downVote ? 'red':''\\\">\\r\\n        </fa-icon>\\r\\n    </div>\\r\\n    </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { SubredditService } from 'src/app/subreddit/subreddit.service';\r\nimport { SubredditModel } from 'src/app/subreddit/subreddit-response';\r\n\r\n@Component({\r\n  selector: 'app-subreddit-side-bar',\r\n  templateUrl: './subreddit-side-bar.component.html',\r\n  styleUrls: ['./subreddit-side-bar.component.css']\r\n})\r\nexport class SubredditSideBarComponent implements OnInit {\r\n  subreddits: Array<SubredditModel> = [];\r\n  displayViewAll: boolean;\r\n\r\n  constructor(private subredditService: SubredditService) {\r\n    this.subredditService.getAllSubreddits().subscribe(data => {\r\n      if (data.length > 3) {\r\n        this.subreddits = data.splice(0, 3);\r\n        this.displayViewAll = true;\r\n      } else {\r\n        this.subreddits = data;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}\r\n","export default \"header{\\r\\n    border-radius: 1px solid;\\r\\n}\\r\\n.reddit-icon-svg{\\r\\n    height: 50px;\\r\\n    padding: 8px 8px 8px 0;\\r\\n    width: 50px;\\r\\n}\\r\\n.reddit-text{        \\r\\n    font-weight: 700;\\r\\n    height: 50px;\\r\\n    width: 50px;    \\r\\n}\\r\\n.logo{\\r\\n    text-decoration: none;\\r\\n}\\r\\n.login, .sign-up{    \\r\\n    background-color: transparent;\\r\\n    border-color: #0079D3;\\r\\n    color: #0079D3;\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    box-sizing: border-box;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;  \\r\\n}\\r\\n.sign-up{\\r\\n    background-color: #0079D3;\\r\\n    border-color: #0079D3;\\r\\n    color: aliceblue;\\r\\n}\\r\\n.sign-up:hover{\\r\\n    opacity: 0.6;\\r\\n}\\r\\n.userdetails{    \\r\\n    background-color: transparent;\\r\\n    border-color: #0079D3;\\r\\n    color: #0079D3;\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    box-sizing: border-box;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;\\r\\n    border: 0px;\\r\\n}\\r\\n.userdetails:hover{\\r\\n    border: 1px solid;\\r\\n}\\r\\n.dropdown-item{\\r\\n    background-color: #f8f9fa;\\r\\n    font-size: 14px;\\r\\n    font-weight: 500;\\r\\n    line-height: 18px;\\r\\n    display: inline-block;\\r\\n    vertical-align: middle;\\r\\n}\\r\\n.dropdown-item:hover{\\r\\n    background-color: #0079D3;\\r\\n}\\r\\n.dropdown-menu{\\r\\n    background-color: #f8f9fa;\\r\\n}\\r\\n.account-icon{\\r\\n    border-radius: 4px;\\r\\n    float: left;\\r\\n    margin-right: 5px;\\r\\n    max-height: 24px;\\r\\n    max-width: 24px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksd0JBQXdCO0FBQzVCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLFdBQVc7QUFDZjtBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixXQUFXO0FBQ2Y7QUFDQTtJQUNJLHFCQUFxQjtBQUN6QjtBQUVBO0lBQ0ksNkJBQTZCO0lBQzdCLHFCQUFxQjtJQUNyQixjQUFjO0lBQ2QsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQix5QkFBeUI7SUFDekIsaUJBQWlCO0lBQ2pCLFVBQVU7QUFDZDtBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLHFCQUFxQjtJQUNyQixnQkFBZ0I7QUFDcEI7QUFFQTtJQUNJLFlBQVk7QUFDaEI7QUFFQTtJQUNJLDZCQUE2QjtJQUM3QixxQkFBcUI7SUFDckIsY0FBYztJQUNkLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixVQUFVO0lBQ1YsV0FBVztBQUNmO0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixxQkFBcUI7SUFDckIsc0JBQXNCO0FBQzFCO0FBRUE7SUFDSSx5QkFBeUI7QUFDN0I7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QjtBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGVBQWU7QUFDbkIiLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJoZWFkZXJ7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxcHggc29saWQ7XHJcbn1cclxuLnJlZGRpdC1pY29uLXN2Z3tcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHBhZGRpbmc6IDhweCA4cHggOHB4IDA7XHJcbiAgICB3aWR0aDogNTBweDtcclxufVxyXG5cclxuLnJlZGRpdC10ZXh0eyAgICAgICAgXHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgd2lkdGg6IDUwcHg7ICAgIFxyXG59XHJcbi5sb2dve1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59XHJcblxyXG4ubG9naW4sIC5zaWduLXVweyAgICBcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3OUQzO1xyXG4gICAgY29sb3I6ICMwMDc5RDM7XHJcbiAgICBmaWxsOiAjMDA3OUQzO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogLjVweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHBhZGRpbmc6IDNweCAxNnB4O1xyXG4gICAgb3BhY2l0eTogMTsgIFxyXG59XHJcblxyXG4uc2lnbi11cHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc5RDM7XHJcbiAgICBib3JkZXItY29sb3I6ICMwMDc5RDM7XHJcbiAgICBjb2xvcjogYWxpY2VibHVlO1xyXG59XHJcblxyXG4uc2lnbi11cDpob3ZlcntcclxuICAgIG9wYWNpdHk6IDAuNjtcclxufVxyXG5cclxuLnVzZXJkZXRhaWxzeyAgICBcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3OUQzO1xyXG4gICAgY29sb3I6ICMwMDc5RDM7XHJcbiAgICBmaWxsOiAjMDA3OUQzO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogLjVweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHBhZGRpbmc6IDNweCAxNnB4O1xyXG4gICAgb3BhY2l0eTogMTtcclxuICAgIGJvcmRlcjogMHB4O1xyXG59XHJcblxyXG4udXNlcmRldGFpbHM6aG92ZXJ7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZDtcclxufVxyXG5cclxuLmRyb3Bkb3duLWl0ZW17XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxOHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxufVxyXG5cclxuLmRyb3Bkb3duLWl0ZW06aG92ZXJ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3OUQzO1xyXG59XHJcblxyXG4uZHJvcGRvd24tbWVudXtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XHJcbn1cclxuXHJcbi5hY2NvdW50LWljb257XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xyXG4gICAgbWF4LWhlaWdodDogMjRweDtcclxuICAgIG1heC13aWR0aDogMjRweDtcclxufSJdfQ== */\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { PostModel } from './post-model';\r\nimport { Observable } from 'rxjs';\r\nimport { CreatePostPayload } from '../post/create-post/create-post.payload';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PostService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllPosts(): Observable<Array<PostModel>> {\r\n    return this.http.get<Array<PostModel>>('http://localhost:8080/api/posts/');\r\n  }\r\n\r\n  createPost(postPayload: CreatePostPayload): Observable<any> {\r\n    return this.http.post('http://localhost:8080/api/posts/', postPayload);\r\n  }\r\n\r\n  getPost(id: number): Observable<PostModel> {\r\n    return this.http.get<PostModel>('http://localhost:8080/api/posts/' + id);\r\n  }\r\n\r\n  getAllPostsByUser(name: string): Observable<PostModel[]> {\r\n    return this.http.get<PostModel[]>('http://localhost:8080/api/posts/by-user/' + name);\r\n  }\r\n}\r\n","export default \"<div class=\\\"reddit-body\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <hr />\\r\\n      <div class=\\\"col-md-9\\\">\\r\\n        <app-post-tile [posts]=\\\"posts\\\"></app-post-tile>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-3\\\">\\r\\n        <app-side-bar></app-side-bar>\\r\\n        <app-subreddit-side-bar></app-subreddit-side-bar>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\";","import { Component, OnInit } from '@angular/core';\r\nimport { PostService } from 'src/app/shared/post.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PostModel } from 'src/app/shared/post-model';\r\nimport { throwError } from 'rxjs';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { CommentPayload } from 'src/app/comment/comment.payload';\r\nimport { CommentService } from 'src/app/comment/comment.service';\r\n\r\n@Component({\r\n  selector: 'app-view-post',\r\n  templateUrl: './view-post.component.html',\r\n  styleUrls: ['./view-post.component.css']\r\n})\r\nexport class ViewPostComponent implements OnInit {\r\n\r\n  postId: number;\r\n  post: PostModel;\r\n  commentForm: FormGroup;\r\n  commentPayload: CommentPayload;\r\n  comments: CommentPayload[];\r\n\r\n  constructor(private postService: PostService, private activateRoute: ActivatedRoute,\r\n    private commentService: CommentService, private router: Router) {\r\n    this.postId = this.activateRoute.snapshot.params.id;\r\n\r\n    this.commentForm = new FormGroup({\r\n      text: new FormControl('', Validators.required)\r\n    });\r\n    this.commentPayload = {\r\n      text: '',\r\n      postId: this.postId\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getPostById();\r\n    this.getCommentsForPost();\r\n  }\r\n\r\n  postComment() {\r\n    this.commentPayload.text = this.commentForm.get('text').value;\r\n    this.commentService.postComment(this.commentPayload).subscribe(data => {\r\n      this.commentForm.get('text').setValue('');\r\n      this.getCommentsForPost();\r\n    }, error => {\r\n      throwError(error);\r\n    })\r\n  }\r\n\r\n  private getPostById() {\r\n    this.postService.getPost(this.postId).subscribe(data => {\r\n      this.post = data;\r\n    }, error => {\r\n      throwError(error);\r\n    });\r\n  }\r\n\r\n  private getCommentsForPost() {\r\n    this.commentService.getAllCommentsForPost(this.postId).subscribe(data => {\r\n      this.comments = data;\r\n    }, error => {\r\n      throwError(error);\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { VotePayload } from './vote-button/vote-payload';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VoteService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  vote(votePayload: VotePayload): Observable<any> {\r\n    return this.http.post('http://localhost:8080/api/votes/', votePayload);\r\n  }\r\n}\r\n","export default \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <hr />\\r\\n      <div class=\\\"col-md-9\\\">\\r\\n        <h2>List of Subreddits</h2>\\r\\n        <ul>\\r\\n          <li *ngFor=\\\"let subreddit of subreddits\\\">\\r\\n              <a routerLink=\\\"/view-subreddit/{{subreddit.id}}\\\">{{subreddit.name}}</a>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-3\\\">\\r\\n        <app-side-bar></app-side-bar>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\";","export default \".votebox {    \\r\\n    display: flex;\\r\\n    text-align: center;\\r\\n    flex-direction: column;\\r\\n    font-size: 1em;    \\r\\n}\\r\\n\\r\\n.votesection{\\r\\n    margin:0px;\\r\\n    background-color: #ffffff;\\r\\n}\\r\\n\\r\\n.upvote,.downvote {\\r\\n    cursor: pointer;\\r\\n    border-radius: 2px solid;        \\r\\n}\\r\\n\\r\\n.upvote:hover {\\r\\n    color: green;\\r\\n}\\r\\n\\r\\n.downvote:hover {\\r\\n    color: red;\\r\\n}\\r\\n\\r\\n.votecount{\\r\\n    font-weight: bold;    \\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZvdGUtYnV0dG9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHlCQUF5QjtBQUM3Qjs7QUFDQTtJQUNJLGVBQWU7SUFDZix3QkFBd0I7QUFDNUI7O0FBQ0E7SUFDSSxZQUFZO0FBQ2hCOztBQUNBO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCIiwiZmlsZSI6InZvdGUtYnV0dG9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudm90ZWJveCB7ICAgIFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBmb250LXNpemU6IDFlbTsgICAgXHJcbn1cclxuXHJcbi52b3Rlc2VjdGlvbntcclxuICAgIG1hcmdpbjowcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xyXG59XHJcbi51cHZvdGUsLmRvd252b3RlIHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweCBzb2xpZDsgICAgICAgIFxyXG59XHJcbi51cHZvdGU6aG92ZXIge1xyXG4gICAgY29sb3I6IGdyZWVuO1xyXG59XHJcbi5kb3dudm90ZTpob3ZlciB7XHJcbiAgICBjb2xvcjogcmVkO1xyXG59XHJcblxyXG4udm90ZWNvdW50e1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7ICAgIFxyXG59Il19 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { SubredditModel } from '../subreddit-response';\r\nimport { SubredditService } from '../subreddit.service';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-list-subreddits',\r\n  templateUrl: './list-subreddits.component.html',\r\n  styleUrls: ['./list-subreddits.component.css']\r\n})\r\nexport class ListSubredditsComponent implements OnInit {\r\n\r\n  subreddits: Array<SubredditModel>;\r\n  constructor(private subredditService: SubredditService) { }\r\n\r\n  ngOnInit() {\r\n    this.subredditService.getAllSubreddits().subscribe(data => {\r\n      this.subreddits = data;\r\n    }, error => {\r\n      throwError(error);\r\n    })\r\n  }\r\n}","export default \".register-section {\\r\\n  margin: 100px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZ251cC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtBQUNmIiwiZmlsZSI6InNpZ251cC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlZ2lzdGVyLXNlY3Rpb24ge1xyXG4gIG1hcmdpbjogMTAwcHg7XHJcbn0iXX0= */\";","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\r\nimport { AuthService } from './auth/shared/auth.service';\r\nimport { catchError, switchMap, take, filter } from 'rxjs/operators';\r\nimport { LoginResponse } from './auth/login/login-response.payload';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n    isTokenRefreshing = false;\r\n    refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject(null);\r\n\r\n    constructor(public authService: AuthService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler):\r\n        Observable<HttpEvent<any>> {\r\n\r\n        if (req.url.indexOf('refresh') !== -1 || req.url.indexOf('login') !== -1) {\r\n            return next.handle(req);\r\n        }\r\n        const jwtToken = this.authService.getJwtToken();\r\n\r\n        if (jwtToken) {\r\n            return next.handle(this.addToken(req, jwtToken)).pipe(catchError(error => {\r\n                if (error instanceof HttpErrorResponse\r\n                    && error.status === 403) {\r\n                    return this.handleAuthErrors(req, next);\r\n                } else {\r\n                    return throwError(error);\r\n                }\r\n            }));\r\n        }\r\n        return next.handle(req);\r\n\r\n    }\r\n\r\n    private handleAuthErrors(req: HttpRequest<any>, next: HttpHandler)\r\n        : Observable<HttpEvent<any>> {\r\n        if (!this.isTokenRefreshing) {\r\n            this.isTokenRefreshing = true;\r\n            this.refreshTokenSubject.next(null);\r\n\r\n            return this.authService.refreshToken().pipe(\r\n                switchMap((refreshTokenResponse: LoginResponse) => {\r\n                    this.isTokenRefreshing = false;\r\n                    this.refreshTokenSubject\r\n                        .next(refreshTokenResponse.authenticationToken);\r\n                    return next.handle(this.addToken(req,\r\n                        refreshTokenResponse.authenticationToken));\r\n                })\r\n            )\r\n        } else {\r\n            return this.refreshTokenSubject.pipe(\r\n                filter(result => result !== null),\r\n                take(1),\r\n                switchMap((res) => {\r\n                    return next.handle(this.addToken(req,\r\n                        this.authService.getJwtToken()))\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    addToken(req: HttpRequest<any>, jwtToken: any) {\r\n        return req.clone({\r\n            headers: req.headers.set('Authorization',\r\n                'Bearer ' + jwtToken)\r\n        });\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { SubredditModel } from '../subreddit-response';\r\nimport { Router } from '@angular/router';\r\nimport { SubredditService } from '../subreddit.service';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-create-subreddit',\r\n  templateUrl: './create-subreddit.component.html',\r\n  styleUrls: ['./create-subreddit.component.css']\r\n})\r\nexport class CreateSubredditComponent implements OnInit {\r\n  createSubredditForm: FormGroup;\r\n  subredditModel: SubredditModel;\r\n  title = new FormControl('');\r\n  description = new FormControl('');\r\n\r\n  constructor(private router: Router, private subredditService: SubredditService) {\r\n    this.createSubredditForm = new FormGroup({\r\n      title: new FormControl('', Validators.required),\r\n      description: new FormControl('', Validators.required)\r\n    });\r\n    this.subredditModel = {\r\n      name: '',\r\n      description: ''\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  discard() {\r\n    this.router.navigateByUrl('/');\r\n  }\r\n\r\n  createSubreddit() {\r\n    this.subredditModel.name = this.createSubredditForm.get('title')\r\n    .value;\r\n    this.subredditModel.description = this.createSubredditForm.get('description')\r\n    .value;\r\n    this.subredditService.createSubreddit(this.subredditModel).subscribe(data => {\r\n      this.router.navigateByUrl('/list-subreddits');\r\n    }, error => {\r\n      throwError(error);\r\n    })\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './shared/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n    const isAuthenticated = this.authService.isLoggedIn();\r\n    if (isAuthenticated) {\r\n      return true;\r\n    } else {\r\n      this.router.navigateByUrl('/login');\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","export default \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <hr />\\r\\n      <div class=\\\"create-post-container col-md-9\\\">\\r\\n        <form class=\\\"post-form\\\" [formGroup]=\\\"createPostForm\\\" (ngSubmit)=\\\"createPost()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"create-post-heading\\\">Create Post</div>\\r\\n            <hr />\\r\\n            <input type=\\\"text\\\" [formControlName]=\\\"'postName'\\\" class=\\\"form-control\\\" style=\\\"margin-top: 5px\\\"\\r\\n              placeholder=\\\"Title\\\">\\r\\n  \\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [formControlName]=\\\"'url'\\\" style=\\\"margin-top: 5px\\\" placeholder=\\\"URL\\\">\\r\\n  \\r\\n            <select class=\\\"form-control\\\" style=\\\"margin-top: 10px\\\" [formControlName]=\\\"'subredditName'\\\">\\r\\n              <option value=\\\"\\\" selected disabled>Select Subreddit</option>\\r\\n              <option *ngFor=\\\"let subreddit of subreddits\\\">{{subreddit.name}}</option>\\r\\n            </select>\\r\\n  \\r\\n            <editor [formControlName]=\\\"'description'\\\" [init]=\\\"{\\r\\n                        height: 500,\\r\\n                        menubar: false,\\r\\n                        plugins: [\\r\\n                          'advlist autolink lists link image charmap print preview anchor',\\r\\n                          'searchreplace visualblocks code fullscreen',\\r\\n                          'insertdatetime media table paste code help wordcount'\\r\\n                        ],\\r\\n                        toolbar:\\r\\n                          'undo redo | formatselect | bold italic backcolor | \\\\\\r\\n                          alignleft aligncenter alignright alignjustify | \\\\\\r\\n                          bullist numlist outdent indent | removeformat | help'\\r\\n                      }\\\"></editor>\\r\\n            <span>\\r\\n              <div style=\\\"margin-top: 5px\\\" class=\\\"float-right\\\">\\r\\n                <button (click)=\\\"discardPost()\\\" class=\\\"btnDiscard\\\">Discard</button>\\r\\n                <button class=\\\"btnCreatePost\\\">Post</button>\\r\\n              </div>\\r\\n            </span>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\";","export enum VoteType {\r\n    UPVOTE,\r\n    DOWNVOTE\r\n}","export default \"<div class=\\\"container\\\">\\r\\n  <div>\\r\\n    Welcome <b>{{name}}</b>.<br /> You have posted <b>{{postLength}}</b> time(s) and commented\\r\\n    <b>{{commentLength}}</b> time(s).\\r\\n    You can check your post and comment history below.\\r\\n  </div>\\r\\n  <hr />\\r\\n  <div>\\r\\n    Your Posts:\\r\\n  </div>\\r\\n  <app-post-tile [posts]=\\\"posts\\\"></app-post-tile>\\r\\n  <hr />\\r\\n  <div>\\r\\n    Your Comments:\\r\\n  </div>\\r\\n  <div *ngFor=\\\"let comment of comments\\\">\\r\\n    <div class=\\\"comment\\\">\\r\\n      <div class=\\\"username\\\">\\r\\n        <a routerLink=\\\"/user/comment.username\\\">{{comment.userName}}</a>\\r\\n      </div>\\r\\n      <div>\\r\\n        <p>{{comment.duration}}</p>\\r\\n      </div>\\r\\n      <b>{{comment.text}}</b>\\r\\n    </div>\\r\\n    <hr />\\r\\n  </div>\\r\\n</div>\\r\\n\";","export default \".post-title {\\r\\n  font-size: 28px;\\r\\n  font-weight: bold;\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n.post-title:hover {\\r\\n  opacity: 0.6;\\r\\n}\\r\\n\\r\\n.subreddit-text {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.post-url {\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n.username{\\r\\n    color: gray;\\r\\n}\\r\\n\\r\\n.post-text{\\r\\n    margin-top: 10px;\\r\\n}\\r\\n\\r\\n.post{\\r\\n    --post-line-color: #ccc;    \\r\\n    border: 1px solid #ccc;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255,255,255,0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding:5px;\\r\\n}\\r\\n\\r\\n.comment{    \\r\\n    --post-line-color: #ccc;    \\r\\n    border: 1px solid #ccc;    \\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255,255,255,0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding:5px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXctcG9zdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixVQUFVO0FBQ1o7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLHVDQUF1QztJQUN2QyxjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsdUNBQXVDO0lBQ3ZDLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZiIsImZpbGUiOiJ2aWV3LXBvc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3N0LXRpdGxlIHtcclxuICBmb250LXNpemU6IDI4cHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgb3BhY2l0eTogMTtcclxufVxyXG5cclxuLnBvc3QtdGl0bGU6aG92ZXIge1xyXG4gIG9wYWNpdHk6IDAuNjtcclxufVxyXG5cclxuLnN1YnJlZGRpdC10ZXh0IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLnBvc3QtdXJsIHtcclxuICBjb2xvcjogYmxhY2s7XHJcbn1cclxuXHJcbi51c2VybmFtZXtcclxuICAgIGNvbG9yOiBncmF5O1xyXG59XHJcblxyXG4ucG9zdC10ZXh0e1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuLnBvc3R7XHJcbiAgICAtLXBvc3QtbGluZS1jb2xvcjogI2NjYzsgICAgXHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjgpO1xyXG4gICAgY29sb3I6ICM4NzhBOEM7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBwYWRkaW5nOjVweDtcclxufVxyXG5cclxuLmNvbW1lbnR7ICAgIFxyXG4gICAgLS1wb3N0LWxpbmUtY29sb3I6ICNjY2M7ICAgIFxyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsgICAgXHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTtcclxuICAgIGNvbG9yOiAjODc4QThDO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgcGFkZGluZzo1cHg7XHJcbn0iXX0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5jc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { SignupRequestPayload } from './singup-request.payload';\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n  signupRequestPayload: SignupRequestPayload;\r\n  signupForm: FormGroup;\r\n\r\n  constructor(private authService: AuthService, private router: Router,\r\n    private toastr: ToastrService) {\r\n    this.signupRequestPayload = {\r\n      username: '',\r\n      email: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.signupForm = new FormGroup({\r\n      username: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  signup() {\r\n    this.signupRequestPayload.email = this.signupForm.get('email').value;\r\n    this.signupRequestPayload.username = this.signupForm.get('username').value;\r\n    this.signupRequestPayload.password = this.signupForm.get('password').value;\r\n\r\n    this.authService.signup(this.signupRequestPayload)\r\n      .subscribe(data => {\r\n        this.router.navigate(['/login'],\r\n          { queryParams: { registered: 'true' } });\r\n      }, error => {\r\n        console.log(error);\r\n        this.toastr.error('Registration Failed! Please try again');\r\n      });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-reddit-clone';\r\n}\r\n","export default \".btnCreatePost,\\r\\n.btnCreateSubreddit {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.post-form {\\r\\n  margin: 2px;\\r\\n}\\r\\n\\r\\n.comment-notification {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.create-post-container {\\r\\n  margin-top: 10px;\\r\\n  --post-line-color: #ccc;\\r\\n  border: 1px solid #ccc;\\r\\n  margin-top: 10px;\\r\\n  margin-bottom: 10px;\\r\\n  overflow: hidden;\\r\\n  background-color: rgba(255, 255, 255, 0.8);\\r\\n  color: #878A8C;\\r\\n  position: relative;\\r\\n  border-radius: 4px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.btnDiscard {\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;\\r\\n    width: 288px;\\r\\n    height: 34px;\\r\\n    margin-top: 5px;\\r\\n    color: #0079D3;\\r\\n    background-color: transparent;\\r\\n  }\\r\\n\\r\\n.create-post-heading {\\r\\n  font-size: 18px;\\r\\n  font-weight: 500;\\r\\n  line-height: 22px;\\r\\n  color: #1c1c1c;\\r\\n  flex: 1;\\r\\n}\\r\\n\\r\\n.btnCreatePost {\\r\\n    background-color: #0079D3;\\r\\n    border-color: #0079D3;\\r\\n    color: aliceblue;\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;\\r\\n    width: 288px;\\r\\n    height: 34px;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS1wb3N0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsdUJBQXVCO0VBQ3ZCLHNCQUFzQjtFQUN0QixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQiwwQ0FBMEM7RUFDMUMsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsWUFBWTtBQUNkOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixpQkFBaUI7SUFDakIsVUFBVTtJQUNWLFlBQVk7SUFDWixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7SUFDZCw2QkFBNkI7RUFDL0I7O0FBRUY7RUFDRSxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixjQUFjO0VBRWQsT0FBTztBQUNUOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixpQkFBaUI7SUFDakIsVUFBVTtJQUNWLFlBQVk7SUFDWixZQUFZO0VBQ2QiLCJmaWxlIjoiY3JlYXRlLXBvc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5idG5DcmVhdGVQb3N0LFxyXG4uYnRuQ3JlYXRlU3VicmVkZGl0IHtcclxuICBtYXJnaW4tdG9wOiA1cHg7XHJcbn1cclxuXHJcbi5wb3N0LWZvcm0ge1xyXG4gIG1hcmdpbjogMnB4O1xyXG59XHJcblxyXG4uY29tbWVudC1ub3RpZmljYXRpb24ge1xyXG4gIG1hcmdpbi10b3A6IDVweDtcclxufVxyXG5cclxuLmNyZWF0ZS1wb3N0LWNvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICAtLXBvc3QtbGluZS1jb2xvcjogI2NjYztcclxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcclxuICBjb2xvcjogIzg3OEE4QztcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIHBhZGRpbmc6IDVweDtcclxufVxyXG5cclxuLmJ0bkRpc2NhcmQge1xyXG4gICAgZmlsbDogIzAwNzlEMztcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogLjVweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHBhZGRpbmc6IDNweCAxNnB4O1xyXG4gICAgb3BhY2l0eTogMTtcclxuICAgIHdpZHRoOiAyODhweDtcclxuICAgIGhlaWdodDogMzRweDtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxuICAgIGNvbG9yOiAjMDA3OUQzO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgfVxyXG5cclxuLmNyZWF0ZS1wb3N0LWhlYWRpbmcge1xyXG4gIGZvbnQtc2l6ZTogMThweDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gIGNvbG9yOiAjMWMxYzFjO1xyXG4gIC1tcy1mbGV4OiAxO1xyXG4gIGZsZXg6IDE7XHJcbn1cclxuXHJcbi5idG5DcmVhdGVQb3N0IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc5RDM7XHJcbiAgICBib3JkZXItY29sb3I6ICMwMDc5RDM7XHJcbiAgICBjb2xvcjogYWxpY2VibHVlO1xyXG4gICAgZmlsbDogIzAwNzlEMztcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogLjVweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHBhZGRpbmc6IDNweCAxNnB4O1xyXG4gICAgb3BhY2l0eTogMTtcclxuICAgIHdpZHRoOiAyODhweDtcclxuICAgIGhlaWdodDogMzRweDtcclxuICB9Il19 */\";","export default \"<app-header></app-header>\\r\\n<router-outlet></router-outlet>\";","import { Injectable, Output, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SignupRequestPayload } from '../signup/singup-request.payload';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { LoginRequestPayload } from '../login/login-request.payload';\r\nimport { LoginResponse } from '../login/login-response.payload';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  @Output() loggedIn: EventEmitter<boolean> = new EventEmitter();\r\n  @Output() username: EventEmitter<string> = new EventEmitter();\r\n\r\n  refreshTokenPayload = {\r\n    refreshToken: this.getRefreshToken(),\r\n    username: this.getUserName()\r\n  }\r\n\r\n  constructor(private httpClient: HttpClient,\r\n    private localStorage: LocalStorageService) {\r\n  }\r\n\r\n  signup(signupRequestPayload: SignupRequestPayload): Observable<any> {\r\n    return this.httpClient.post('http://localhost:8080/api/auth/signup', signupRequestPayload, { responseType: 'text' });\r\n  }\r\n\r\n  login(loginRequestPayload: LoginRequestPayload): Observable<boolean> {\r\n    return this.httpClient.post<LoginResponse>('http://localhost:8080/api/auth/login',\r\n      loginRequestPayload).pipe(map(data => {\r\n        this.localStorage.store('authenticationToken', data.authenticationToken);\r\n        this.localStorage.store('username', data.username);\r\n        this.localStorage.store('refreshToken', data.refreshToken);\r\n        this.localStorage.store('expiresAt', data.expiresAt);\r\n\r\n        this.loggedIn.emit(true);\r\n        this.username.emit(data.username);\r\n        return true;\r\n      }));\r\n  }\r\n\r\n  getJwtToken() {\r\n    return this.localStorage.retrieve('authenticationToken');\r\n  }\r\n\r\n  refreshToken() {\r\n    return this.httpClient.post<LoginResponse>('http://localhost:8080/api/auth/refresh/token',\r\n      this.refreshTokenPayload)\r\n      .pipe(tap(response => {\r\n        this.localStorage.clear('authenticationToken');\r\n        this.localStorage.clear('expiresAt');\r\n\r\n        this.localStorage.store('authenticationToken',\r\n          response.authenticationToken);\r\n        this.localStorage.store('expiresAt', response.expiresAt);\r\n      }));\r\n  }\r\n\r\n  logout() {\r\n    this.httpClient.post('http://localhost:8080/api/auth/logout', this.refreshTokenPayload,\r\n      { responseType: 'text' })\r\n      .subscribe(data => {\r\n        console.log(data);\r\n      }, error => {\r\n        throwError(error);\r\n      })\r\n    this.localStorage.clear('authenticationToken');\r\n    this.localStorage.clear('username');\r\n    this.localStorage.clear('refreshToken');\r\n    this.localStorage.clear('expiresAt');\r\n  }\r\n\r\n  getUserName() {\r\n    return this.localStorage.retrieve('username');\r\n  }\r\n  getRefreshToken() {\r\n    return this.localStorage.retrieve('refreshToken');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.getJwtToken() != null;\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { SignupComponent } from './auth/signup/signup.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { NgxWebstorageModule } from 'ngx-webstorage';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { TokenInterceptor } from './token-interceptor';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { PostTileComponent } from './shared/post-tile/post-tile.component';\r\nimport { VoteButtonComponent } from './shared/vote-button/vote-button.component';\r\nimport { SideBarComponent } from './shared/side-bar/side-bar.component';\r\nimport { SubredditSideBarComponent } from './shared/subreddit-side-bar/subreddit-side-bar.component';\r\nimport { CreateSubredditComponent } from './subreddit/create-subreddit/create-subreddit.component';\r\nimport { CreatePostComponent } from './post/create-post/create-post.component';\r\nimport { ListSubredditsComponent } from './subreddit/list-subreddits/list-subreddits.component';\r\nimport { EditorModule } from '@tinymce/tinymce-angular';\r\nimport { ViewPostComponent } from './post/view-post/view-post.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { UserProfileComponent } from './auth/user-profile/user-profile.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    SignupComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    PostTileComponent,\r\n    VoteButtonComponent,\r\n    SideBarComponent,\r\n    SubredditSideBarComponent,\r\n    CreateSubredditComponent,\r\n    CreatePostComponent,\r\n    ListSubredditsComponent,\r\n    ViewPostComponent,\r\n    UserProfileComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    NgxWebstorageModule.forRoot(),\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot(),\r\n    FontAwesomeModule,\r\n    EditorModule,\r\n    NgbModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { PostModel } from '../post-model';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { VotePayload } from './vote-payload';\r\nimport { VoteType } from './vote-type';\r\nimport { VoteService } from '../vote.service';\r\nimport { AuthService } from 'src/app/auth/shared/auth.service';\r\nimport { PostService } from '../post.service';\r\nimport { throwError } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-vote-button',\r\n  templateUrl: './vote-button.component.html',\r\n  styleUrls: ['./vote-button.component.css']\r\n})\r\nexport class VoteButtonComponent implements OnInit {\r\n\r\n  @Input() post: PostModel;\r\n  votePayload: VotePayload;\r\n  faArrowUp = faArrowUp;\r\n  faArrowDown = faArrowDown;\r\n  upvoteColor: string;\r\n  downvoteColor: string;\r\n  isLoggedIn: boolean;\r\n\r\n  constructor(private voteService: VoteService,\r\n    private authService: AuthService,\r\n    private postService: PostService, private toastr: ToastrService) {\r\n\r\n    this.votePayload = {\r\n      voteType: undefined,\r\n      postId: undefined\r\n    }\r\n    this.authService.loggedIn.subscribe((data: boolean) => this.isLoggedIn = data);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.updateVoteDetails();\r\n  }\r\n\r\n  upvotePost() {\r\n    this.votePayload.voteType = VoteType.UPVOTE;\r\n    this.vote();\r\n    this.downvoteColor = '';\r\n  }\r\n\r\n  downvotePost() {\r\n    this.votePayload.voteType = VoteType.DOWNVOTE;\r\n    this.vote();\r\n    this.upvoteColor = '';\r\n  }\r\n\r\n  private vote() {\r\n    this.votePayload.postId = this.post.id;\r\n    this.voteService.vote(this.votePayload).subscribe(() => {\r\n      this.updateVoteDetails();\r\n    }, error => {\r\n      this.toastr.error(error.error.message);\r\n      throwError(error);\r\n    });\r\n  }\r\n\r\n  private updateVoteDetails() {\r\n    this.postService.getPost(this.post.id).subscribe(post => {\r\n      this.post = post;\r\n    });\r\n  }\r\n}\r\n","export default \".create-subreddit-container {\\r\\n    margin-top: 10px;\\r\\n    --post-line-color: #ccc;\\r\\n    border: 1px solid #ccc;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255, 255, 255, 0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding: 5px;\\r\\n  }\\r\\n  \\r\\n  .create-subreddit-heading {\\r\\n    font-size: 18px;\\r\\n    font-weight: 500;\\r\\n    line-height: 22px;\\r\\n    color: #1c1c1c;\\r\\n    flex: 1;\\r\\n  }\\r\\n  \\r\\n  .btnCreateSubreddit {\\r\\n    background-color: #0079D3;\\r\\n    border-color: #0079D3;\\r\\n    color: aliceblue;\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;\\r\\n    width: 288px;\\r\\n    height: 34px;\\r\\n  }\\r\\n  \\r\\n  .btnDiscard {\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;\\r\\n    opacity: 1;\\r\\n    width: 288px;\\r\\n    height: 34px;\\r\\n    margin-top: 5px;\\r\\n    color: #0079D3;\\r\\n    background-color: transparent;\\r\\n  }\\r\\n  \\r\\n  .guidelines {\\r\\n    text-align: center;\\r\\n    font-size: 16px;\\r\\n    font-weight: 500;\\r\\n    line-height: 20px;\\r\\n    color: #1c1c1c;\\r\\n  }\\r\\n  \\r\\n  .sidebar {\\r\\n    width: 312px;\\r\\n    height: 242px;\\r\\n    --post-line-color: #ccc;\\r\\n    border: 1px solid #ccc;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255, 255, 255, 0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding: 5px;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS1zdWJyZWRkaXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLDBDQUEwQztJQUMxQyxjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0lBRWQsT0FBTztFQUNUOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixpQkFBaUI7SUFDakIsVUFBVTtJQUNWLFlBQVk7SUFDWixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixVQUFVO0lBQ1YsWUFBWTtJQUNaLFlBQVk7SUFDWixlQUFlO0lBQ2YsY0FBYztJQUNkLDZCQUE2QjtFQUMvQjs7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixjQUFjO0VBQ2hCOztFQUVBO0lBQ0UsWUFBWTtJQUNaLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsMENBQTBDO0lBQzFDLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsbUJBQW1CO0VBQ3JCIiwiZmlsZSI6ImNyZWF0ZS1zdWJyZWRkaXQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jcmVhdGUtc3VicmVkZGl0LWNvbnRhaW5lciB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgLS1wb3N0LWxpbmUtY29sb3I6ICNjY2M7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xyXG4gICAgY29sb3I6ICM4NzhBOEM7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5jcmVhdGUtc3VicmVkZGl0LWhlYWRpbmcge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgY29sb3I6ICMxYzFjMWM7XHJcbiAgICAtbXMtZmxleDogMTtcclxuICAgIGZsZXg6IDE7XHJcbiAgfVxyXG4gIFxyXG4gIC5idG5DcmVhdGVTdWJyZWRkaXQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzlEMztcclxuICAgIGJvcmRlci1jb2xvcjogIzAwNzlEMztcclxuICAgIGNvbG9yOiBhbGljZWJsdWU7XHJcbiAgICBmaWxsOiAjMDA3OUQzO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIGxldHRlci1zcGFjaW5nOiAuNXB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgcGFkZGluZzogM3B4IDE2cHg7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgd2lkdGg6IDI4OHB4O1xyXG4gICAgaGVpZ2h0OiAzNHB4O1xyXG4gIH1cclxuICBcclxuICAuYnRuRGlzY2FyZCB7XHJcbiAgICBmaWxsOiAjMDA3OUQzO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIGxldHRlci1zcGFjaW5nOiAuNXB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgcGFkZGluZzogM3B4IDE2cHg7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgd2lkdGg6IDI4OHB4O1xyXG4gICAgaGVpZ2h0OiAzNHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG4gICAgY29sb3I6ICMwMDc5RDM7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICB9XHJcbiAgXHJcbiAgLmd1aWRlbGluZXMge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xyXG4gICAgY29sb3I6ICMxYzFjMWM7XHJcbiAgfVxyXG4gIFxyXG4gIC5zaWRlYmFyIHtcclxuICAgIHdpZHRoOiAzMTJweDtcclxuICAgIGhlaWdodDogMjQycHg7XHJcbiAgICAtLXBvc3QtbGluZS1jb2xvcjogI2NjYztcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcclxuICAgIGNvbG9yOiAjODc4QThDO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgfSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { LoginRequestPayload } from './login-request.payload';\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  loginRequestPayload: LoginRequestPayload;\r\n  registerSuccessMessage: string;\r\n  isError: boolean;\r\n\r\n  constructor(private authService: AuthService, private activatedRoute: ActivatedRoute,\r\n    private router: Router, private toastr: ToastrService) {\r\n    this.loginRequestPayload = {\r\n      username: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.activatedRoute.queryParams\r\n      .subscribe(params => {\r\n        if (params.registered !== undefined && params.registered === 'true') {\r\n          this.toastr.success('Signup Successful');\r\n          this.registerSuccessMessage = 'Please Check your inbox for activation email '\r\n            + 'activate your account before you Login!';\r\n        }\r\n      });\r\n  }\r\n\r\n  login() {\r\n    this.loginRequestPayload.username = this.loginForm.get('username').value;\r\n    this.loginRequestPayload.password = this.loginForm.get('password').value;\r\n\r\n    this.authService.login(this.loginRequestPayload).subscribe(data => {\r\n      this.isError = false;\r\n      this.router.navigateByUrl('');\r\n      this.toastr.success('Login Successful');\r\n    }, error => {\r\n      this.isError = true;\r\n      throwError(error);\r\n    });\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewEncapsulation, Input } from '@angular/core';\r\nimport { PostService } from '../post.service';\r\nimport { PostModel } from '../post-model';\r\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-post-tile',\r\n  templateUrl: './post-tile.component.html',\r\n  styleUrls: ['./post-tile.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PostTileComponent implements OnInit {\r\n\r\n  faComments = faComments;\r\n  @Input() posts: PostModel[];\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  goToPost(id: number): void {\r\n    this.router.navigateByUrl('/view-post/' + id);\r\n  }\r\n}\r\n","export default \".post{\\r\\n    --post-line-color: #ccc;    \\r\\n    border: 1px solid #ccc;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255,255,255,0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding:5px;\\r\\n}\\r\\n\\r\\n.btnCommments{\\r\\n    border-radius: 2px solid;\\r\\n    color: #878A8C;\\r\\n    opacity: 1;\\r\\n}\\r\\n\\r\\n.btnCommments:hover{\\r\\n    opacity: 0.65;\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.post-title{\\r\\n    font-size: 28px;\\r\\n    font-weight: bold;\\r\\n    opacity: 1;\\r\\n}\\r\\n\\r\\n.posturl, .postname{    \\r\\n    color: black;\\r\\n}\\r\\n\\r\\n.subreddit-text{\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.post-text{\\r\\n    margin-top: 10px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3QtdGlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQix1Q0FBdUM7SUFDdkMsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLGNBQWM7SUFDZCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQiIsImZpbGUiOiJwb3N0LXRpbGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wb3N0e1xyXG4gICAgLS1wb3N0LWxpbmUtY29sb3I6ICNjY2M7ICAgIFxyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTtcclxuICAgIGNvbG9yOiAjODc4QThDO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgcGFkZGluZzo1cHg7XHJcbn1cclxuXHJcbi5idG5Db21tbWVudHN7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHggc29saWQ7XHJcbiAgICBjb2xvcjogIzg3OEE4QztcclxuICAgIG9wYWNpdHk6IDE7XHJcbn1cclxuXHJcbi5idG5Db21tbWVudHM6aG92ZXJ7XHJcbiAgICBvcGFjaXR5OiAwLjY1O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4ucG9zdC10aXRsZXtcclxuICAgIGZvbnQtc2l6ZTogMjhweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgb3BhY2l0eTogMTtcclxufVxyXG5cclxuLnBvc3R1cmwsIC5wb3N0bmFtZXsgICAgXHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbn1cclxuXHJcbi5zdWJyZWRkaXQtdGV4dHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4ucG9zdC10ZXh0e1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxufSJdfQ== */\";","export default \".sidebar{\\r\\n    width: 312px;\\r\\n    height: 242px;\\r\\n    --post-line-color: #ccc;    \\r\\n    border: 1px solid #ccc;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255,255,255,0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding:5px;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btnCreatePost, .btnCreateSubreddit{\\r\\n    background-color: #0079D3;\\r\\n    border-color: #0079D3;\\r\\n    color: aliceblue;\\r\\n    fill: #0079D3;\\r\\n    border: 1px solid;\\r\\n    border-radius: 4px;\\r\\n    text-align: center;\\r\\n    letter-spacing: 1px;\\r\\n    text-decoration: none;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    letter-spacing: .5px;\\r\\n    line-height: 24px;\\r\\n    text-transform: uppercase;\\r\\n    padding: 3px 16px;    \\r\\n    opacity: 1;\\r\\n    width: 288px;\\r\\n    height: 34px;\\r\\n}\\r\\n\\r\\n.btnCreateSubreddit{\\r\\n    margin-top: 5px;\\r\\n    color: #0079D3;\\r\\n    background-color: transparent;\\r\\n}\\r\\n\\r\\n.sidebar>ul>li{\\r\\n    font-size: 16px;\\r\\n    font-weight: 500;\\r\\n    line-height: 20px;\\r\\n    color: #1c1c1c;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGUtYmFyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQix1Q0FBdUM7SUFDdkMsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixVQUFVO0lBQ1YsWUFBWTtJQUNaLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsY0FBYztJQUNkLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQWM7QUFDbEIiLCJmaWxlIjoic2lkZS1iYXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlYmFye1xyXG4gICAgd2lkdGg6IDMxMnB4O1xyXG4gICAgaGVpZ2h0OiAyNDJweDtcclxuICAgIC0tcG9zdC1saW5lLWNvbG9yOiAjY2NjOyAgICBcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTtcclxuICAgIGNvbG9yOiAjODc4QThDO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgcGFkZGluZzo1cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmJ0bkNyZWF0ZVBvc3QsIC5idG5DcmVhdGVTdWJyZWRkaXR7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3OUQzO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3OUQzO1xyXG4gICAgY29sb3I6IGFsaWNlYmx1ZTtcclxuICAgIGZpbGw6ICMwMDc5RDM7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGxldHRlci1zcGFjaW5nOiAxcHg7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IC41cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjRweDtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBwYWRkaW5nOiAzcHggMTZweDsgICAgXHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgd2lkdGg6IDI4OHB4O1xyXG4gICAgaGVpZ2h0OiAzNHB4O1xyXG59XHJcblxyXG4uYnRuQ3JlYXRlU3VicmVkZGl0e1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG4gICAgY29sb3I6ICMwMDc5RDM7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuLnNpZGViYXI+dWw+bGl7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICBjb2xvcjogIzFjMWMxYztcclxufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { AuthService } from '../auth/shared/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  faUser = faUser;\r\n  isLoggedIn: boolean;\r\n  username: string;\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.authService.loggedIn.subscribe((data: boolean) => this.isLoggedIn = data);\r\n    this.authService.username.subscribe((data: string) => this.username = data);\r\n    this.isLoggedIn = this.authService.isLoggedIn();\r\n    this.username = this.authService.getUserName();\r\n  }\r\n\r\n  goToUserProfile() {\r\n    this.router.navigateByUrl('/user-profile/' + this.username);\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.isLoggedIn = false;\r\n    this.router.navigateByUrl('');\r\n  }\r\n}\r\n","export default \"<div class=\\\"sidebar\\\">\\r\\n    <img src=\\\"https://www.redditstatic.com/desktop2x/img/id-cards/home-banner@2x.png\\\">\\r\\n    <div style=\\\"text-align: center; font-size: 1em\\\">Welcome to Spring Reddit Clone home page. Come here to\\r\\n        check in with your favorite subreddits.</div>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n        <button class=\\\"btnCreatePost\\\" (click)=\\\"goToCreatePost()\\\">Create Post</button>\\r\\n    </div>\\r\\n    <div style=\\\"text-align: center\\\">\\r\\n        <button class=\\\"btnCreateSubreddit\\\" (click)=\\\"goToCreateSubreddit()\\\">Create Subreddit</button>\\r\\n    </div>\\r\\n</div>\";","export default \".sidebar-view-subreddit {\\r\\n    width: 312px;\\r\\n    height: 242px;\\r\\n    --post-line-color: #ccc;\\r\\n    border: 1px solid #ccc;\\r\\n    margin-bottom: 10px;\\r\\n    overflow: hidden;\\r\\n    background-color: rgba(255, 255, 255, 0.8);\\r\\n    color: #878A8C;\\r\\n    position: relative;\\r\\n    border-radius: 4px;\\r\\n    padding: 5px;\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n  \\r\\n  .sidebar-view-subreddit {\\r\\n    height: 280px;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1YnJlZGRpdC1zaWRlLWJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsMENBQTBDO0lBQzFDLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsYUFBYTtFQUNmIiwiZmlsZSI6InN1YnJlZGRpdC1zaWRlLWJhci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNpZGViYXItdmlldy1zdWJyZWRkaXQge1xyXG4gICAgd2lkdGg6IDMxMnB4O1xyXG4gICAgaGVpZ2h0OiAyNDJweDtcclxuICAgIC0tcG9zdC1saW5lLWNvbG9yOiAjY2NjO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xyXG4gICAgY29sb3I6ICM4NzhBOEM7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgLnNpZGViYXItdmlldy1zdWJyZWRkaXQge1xyXG4gICAgaGVpZ2h0OiAyODBweDtcclxuICB9Il19 */\";","export default \"<header>\\r\\n    <nav class=\\\"navbar fixed-top navbar-expand-lg navbar-light bg-light\\\">\\r\\n        <div class=\\\"flex-grow-1\\\">\\r\\n            <a aria-label=\\\"Home\\\" class=\\\"logo\\\" routerLink=\\\"/\\\">\\r\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" class=\\\"reddit-icon-svg\\\">\\r\\n                    <g>\\r\\n                        <circle fill=\\\"#FF4500\\\" cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"10\\\"></circle>\\r\\n                        <path fill=\\\"#FFF\\\"\\r\\n                            d=\\\"M16.67,10A1.46,1.46,0,0,0,14.2,9a7.12,7.12,0,0,0-3.85-1.23L11,4.65,13.14,5.1a1,1,0,1,0,.13-0.61L10.82,4a0.31,0.31,0,0,0-.37.24L9.71,7.71a7.14,7.14,0,0,0-3.9,1.23A1.46,1.46,0,1,0,4.2,11.33a2.87,2.87,0,0,0,0,.44c0,2.24,2.61,4.06,5.83,4.06s5.83-1.82,5.83-4.06a2.87,2.87,0,0,0,0-.44A1.46,1.46,0,0,0,16.67,10Zm-10,1a1,1,0,1,1,1,1A1,1,0,0,1,6.67,11Zm5.81,2.75a3.84,3.84,0,0,1-2.47.77,3.84,3.84,0,0,1-2.47-.77,0.27,0.27,0,0,1,.38-0.38A3.27,3.27,0,0,0,10,14a3.28,3.28,0,0,0,2.09-.61A0.27,0.27,0,1,1,12.48,13.79Zm-0.18-1.71a1,1,0,1,1,1-1A1,1,0,0,1,12.29,12.08Z\\\">\\r\\n                        </path>\\r\\n                    </g>\\r\\n                </svg>\\r\\n                <span class=\\\"reddit-text\\\">\\r\\n                    Spring Reddit Clone\\r\\n                </span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"flex-grow-1 float-right\\\">\\r\\n            <div *ngIf=\\\"isLoggedIn\\\" ngbDropdown class=\\\"float-right\\\">\\r\\n                <div ngbDropdownMenu aria-labelledby=\\\"dropdownBasic1\\\">\\r\\n                    <button (click)=\\\"goToUserProfile()\\\" ngbDropdownItem>Profile</button>\\r\\n                    <button (click)=\\\"logout()\\\" ngbDropdownItem>Logout</button>\\r\\n                </div>\\r\\n                <button class=\\\"userdetails\\\" id=\\\"dropdownBasic1\\\" ngbDropdownToggle>\\r\\n                    <img class=\\\"account-icon\\\" src=\\\"https://www.redditstatic.com/avatars/avatar_default_08_D4E815.png\\\">\\r\\n                    {{username}}\\r\\n                </button>\\r\\n            </div>            \\r\\n            <div *ngIf=\\\"!isLoggedIn\\\">\\r\\n                <a routerLink=\\\"/sign-up\\\" class=\\\"float-right sign-up mr-2\\\">Sign up</a>\\r\\n                <a routerLink=\\\"/login\\\" class=\\\"float-right login mr-2\\\">Login</a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommentPayload } from './comment.payload';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommentService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAllCommentsForPost(postId: number): Observable<CommentPayload[]> {\r\n    return this.httpClient.get<CommentPayload[]>('http://localhost:8080/api/comments/by-post/' + postId);\r\n  }\r\n\r\n  postComment(commentPayload: CommentPayload): Observable<any> {\r\n    return this.httpClient.post<any>('http://localhost:8080/api/comments/', commentPayload);\r\n  }\r\n\r\n  getAllCommentsByUser(name: string) {\r\n    return this.httpClient.get<CommentPayload[]>('http://localhost:8080/api/comments/by-user/' + name);\r\n  }\r\n}\r\n","export default \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"create-subreddit-container\\\">\\r\\n        <form class=\\\"post-form\\\" [formGroup]=\\\"createSubredditForm\\\" (ngSubmit)=\\\"createSubreddit()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"create-subreddit-heading\\\">Create Subreddit</div>\\r\\n            <hr />\\r\\n            <input type=\\\"text\\\" [formControlName]=\\\"'title'\\\" class=\\\"form-control\\\" style=\\\"margin-top: 5px\\\"\\r\\n              placeholder=\\\"Title\\\">\\r\\n            <textarea type=\\\"text\\\" [formControlName]=\\\"'description'\\\" style=\\\"width: 100%; margin-top: 5px\\\"\\r\\n              placeholder=\\\"Description\\\"></textarea>\\r\\n            <div>\\r\\n              <div style=\\\"margin-top: 5px\\\" class=\\\"float-right\\\">\\r\\n                <button (click)=\\\"discard()\\\" class=\\\"btnDiscard\\\">Discard</button>\\r\\n                <button class=\\\"btnCreateSubreddit\\\">Create</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-3\\\">\\r\\n        <div class=\\\"sidebar\\\">\\r\\n          <h5 class=\\\"guidelines\\\">Posting to Spring Reddit</h5>\\r\\n          <hr />\\r\\n          <ul>\\r\\n            <li>Remember the human</li>\\r\\n            <hr />\\r\\n            <li>Behave like you would in real life</li>\\r\\n            <hr />\\r\\n            <li>Don't spam</li>\\r\\n            <hr />\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\";","export default \"<div class=\\\"sidebar-view-subreddit\\\">\\r\\n    <div style=\\\"color: black; font-weight: bold\\\">Browse Subreddits</div>\\r\\n    <hr />\\r\\n    <span *ngFor=\\\"let subreddit of subreddits\\\">\\r\\n        <span class=\\\"subreddit-text\\\"><a href=\\\"/view-subreddit/{{subreddit.id}}\\\">{{subreddit.name}}</a></span>\\r\\n        <hr />\\r\\n    </span>\\r\\n    <div style=\\\"text-align: center\\\" *ngIf=\\\"displayViewAll\\\">\\r\\n        <a style=\\\"font-weight: bold\\\" routerLink=\\\"/list-subreddits\\\">View All</a>\\r\\n    </div>\\r\\n</div>\";","import { Component, OnInit } from '@angular/core';\r\nimport { PostService } from 'src/app/shared/post.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CommentService } from 'src/app/comment/comment.service';\r\nimport { PostModel } from 'src/app/shared/post-model';\r\nimport { CommentPayload } from 'src/app/comment/comment.payload';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.css']\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n  name: string;\r\n  posts: PostModel[];\r\n  comments: CommentPayload[];\r\n  postLength: number;\r\n  commentLength: number;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute, private postService: PostService,\r\n    private commentService: CommentService) {\r\n    this.name = this.activatedRoute.snapshot.params.name;\r\n\r\n    this.postService.getAllPostsByUser(this.name).subscribe(data => {\r\n      this.posts = data;\r\n      this.postLength = data.length;\r\n    });\r\n    this.commentService.getAllCommentsByUser(this.name).subscribe(data => {\r\n      this.comments = data;\r\n      this.commentLength = data.length;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","export default \"<!-- Display Posts-->\\r\\n<div class=\\\"row post\\\" *ngFor=\\\"let post of posts\\\">\\r\\n  <app-vote-button [post]=\\\"post\\\"></app-vote-button>\\r\\n  <!-- Section to Display Post Information-->\\r\\n  <div class=\\\"col-md-11\\\">\\r\\n    <span class=\\\"subreddit-info\\\">\\r\\n      <span class=\\\"subreddit-text\\\"><a class=\\\"posturl\\\" routerLink=\\\"\\\">{{post.subredditName}}</a></span>\\r\\n      <span> . Posted by <a class=\\\"username\\\" routerLink=\\\"/user/{{post.userName}}\\\">{{post.userName}}</a></span>\\r\\n      <span> . {{post.duration}}</span>\\r\\n    </span>\\r\\n    <hr />\\r\\n    <div class=\\\"post-title\\\">\\r\\n      <a class=\\\"postname\\\" href=\\\"{{post.url}}\\\">{{post.postName}}</a>\\r\\n    </div>\\r\\n    <div>\\r\\n      <p class=\\\"post-text\\\" [innerHtml]=\\\"post.description\\\"></p>\\r\\n    </div>\\r\\n    <hr />\\r\\n    <span>\\r\\n      <a class=\\\"btnCommments\\\" role=\\\"button\\\">\\r\\n        <fa-icon [icon]=\\\"faComments\\\"></fa-icon>\\r\\n        Comments({{post.commentCount}})\\r\\n      </a>\\r\\n      <button class=\\\"login\\\" (click)=\\\"goToPost(post.id)\\\">\\r\\n        Read Post\\r\\n      </button>\\r\\n    </span>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { SubredditModel } from 'src/app/subreddit/subreddit-response';\r\nimport { Router } from '@angular/router';\r\nimport { PostService } from 'src/app/shared/post.service';\r\nimport { SubredditService } from 'src/app/subreddit/subreddit.service';\r\nimport { throwError } from 'rxjs';\r\nimport { CreatePostPayload } from './create-post.payload';\r\n\r\n@Component({\r\n  selector: 'app-create-post',\r\n  templateUrl: './create-post.component.html',\r\n  styleUrls: ['./create-post.component.css']\r\n})\r\nexport class CreatePostComponent implements OnInit {\r\n\r\n  createPostForm: FormGroup;\r\n  postPayload: CreatePostPayload;\r\n  subreddits: Array<SubredditModel>;\r\n\r\n  constructor(private router: Router, private postService: PostService,\r\n    private subredditService: SubredditService) {\r\n    this.postPayload = {\r\n      postName: '',\r\n      url: '',\r\n      description: '',\r\n      subredditName: ''\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createPostForm = new FormGroup({\r\n      postName: new FormControl('', Validators.required),\r\n      subredditName: new FormControl('', Validators.required),\r\n      url: new FormControl('', Validators.required),\r\n      description: new FormControl('', Validators.required),\r\n    });\r\n    this.subredditService.getAllSubreddits().subscribe((data) => {\r\n      this.subreddits = data;\r\n    }, error => {\r\n      throwError(error);\r\n    });\r\n  }\r\n\r\n  createPost() {\r\n    this.postPayload.postName = this.createPostForm.get('postName').value;\r\n    this.postPayload.subredditName = this.createPostForm.get('subredditName').value;\r\n    this.postPayload.url = this.createPostForm.get('url').value;\r\n    this.postPayload.description = this.createPostForm.get('description').value;\r\n\r\n    this.postService.createPost(this.postPayload).subscribe((data) => {\r\n      this.router.navigateByUrl('/');\r\n    }, error => {\r\n      throwError(error);\r\n    })\r\n  }\r\n\r\n  discardPost() {\r\n    this.router.navigateByUrl('/');\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SignupComponent } from './auth/signup/signup.component';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CreatePostComponent } from './post/create-post/create-post.component';\r\nimport { CreateSubredditComponent } from './subreddit/create-subreddit/create-subreddit.component';\r\nimport { ListSubredditsComponent } from './subreddit/list-subreddits/list-subreddits.component';\r\nimport { ViewPostComponent } from './post/view-post/view-post.component';\r\nimport { UserProfileComponent } from './auth/user-profile/user-profile.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'view-post/:id', component: ViewPostComponent },\r\n  { path: 'user-profile/:name', component: UserProfileComponent, canActivate: [AuthGuard] },\r\n  { path: 'list-subreddits', component: ListSubredditsComponent },\r\n  { path: 'create-post', component: CreatePostComponent, canActivate: [AuthGuard] },\r\n  { path: 'create-subreddit', component: CreateSubredditComponent, canActivate: [AuthGuard] },\r\n  { path: 'sign-up', component: SignupComponent },\r\n  { path: 'login', component: LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }","export default \".login-section{\\r\\n    margin: 100px;\\r\\n}\\r\\n\\r\\n.login-failed, .register-success{\\r\\n    text-align: center;\\r\\n    margin: auto;\\r\\n    margin-top: 10px;\\r\\n    border: 2px solid black;\\r\\n    width: 65%;    \\r\\n    background-color: red;\\r\\n}\\r\\n\\r\\n.login-failed-text, .register-success-text{\\r\\n    text-align: center;\\r\\n    margin-top: 5px;\\r\\n    font-weight: bold;    \\r\\n    color: aliceblue;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLFVBQVU7SUFDVixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEIiLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dpbi1zZWN0aW9ue1xyXG4gICAgbWFyZ2luOiAxMDBweDtcclxufVxyXG5cclxuLmxvZ2luLWZhaWxlZCwgLnJlZ2lzdGVyLXN1Y2Nlc3N7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XHJcbiAgICB3aWR0aDogNjUlOyAgICBcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufVxyXG5cclxuLmxvZ2luLWZhaWxlZC10ZXh0LCAucmVnaXN0ZXItc3VjY2Vzcy10ZXh0e1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luLXRvcDogNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7ICAgIFxyXG4gICAgY29sb3I6IGFsaWNlYmx1ZTtcclxufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-side-bar',\r\n  templateUrl: './side-bar.component.html',\r\n  styleUrls: ['./side-bar.component.css']\r\n})\r\nexport class SideBarComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  goToCreatePost() {\r\n    this.router.navigateByUrl('/create-post');\r\n  }\r\n\r\n  goToCreateSubreddit() {\r\n    this.router.navigateByUrl('/create-subreddit');\r\n  }\r\n\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","export default \"<div class=\\\"login-section\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-3\\\"></div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n            <div class=\\\"card\\\">\\r\\n                <div class=\\\"card-header\\\" style=\\\"text-align: center\\\"><h4>Login</h4></div>\\r\\n                <div class=\\\"card-body\\\">\\r\\n                    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <label for=\\\"user_name\\\" class=\\\"col-md-4 col-form-label text-md-right\\\">Username</label>\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <input type=\\\"text\\\" id=\\\"user_name\\\" class=\\\"form-control\\\" [formControlName]=\\\"'username'\\\" name=\\\"user_name\\\" required\\r\\n                                    autofocus>\\r\\n                                <span *ngIf=\\\"!loginForm.get('username').valid && loginForm.get('username').touched\\\">\\r\\n                                   Please provide a valid username\\r\\n                                </span>                                    \\r\\n                            </div>\\r\\n                        </div>\\r\\n \\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <label for=\\\"password\\\" class=\\\"col-md-4 col-form-label text-md-right\\\">Password</label>\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <input type=\\\"password\\\" id=\\\"password\\\" class=\\\"form-control\\\" [formControlName]=\\\"'password'\\\" name=\\\"password\\\" required>\\r\\n                                <span *ngIf=\\\"!loginForm.get('password').valid && loginForm.get('password').touched\\\">\\r\\n                                  Password cannot be empty\\r\\n                                </span>                                \\r\\n                            </div>\\r\\n                        </div>\\r\\n \\r\\n                        <span class=\\\"col-md-6 offset-md-4\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"login\\\">\\r\\n                                Login\\r\\n                            </button>\\r\\n                            <span style=\\\"padding-left: 15px\\\">New User? <a routerLink=\\\"/signup\\\">SIGN UP</a></span>\\r\\n                        </span>   \\r\\n                        <div class=\\\"login-failed\\\" *ngIf='this.isError'>\\r\\n                             <p class=\\\"login-failed-text\\\">Login Failed. Please check your credentials and try again.</p>   \\r\\n                        </div>\\r\\n                        <div class=\\\"login-failed\\\" [ngStyle]=\\\"{'background-color': 'green'}\\\" *ngIf=\\\"this.registerSuccessMessage.length > 0\\\">\\r\\n                            <p class=\\\"register-success-text\\\">{{registerSuccessMessage}}</p>   \\r\\n                       </div>                       \\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-3\\\"></div>\\r\\n    </div>\\r\\n</div>\";"]}